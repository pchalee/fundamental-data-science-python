{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n",
      "/home/prateek/anaconda3/lib/python3.6/importlib/_bootstrap.py:205: RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' does not match runtime version 3.6\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from IPython.display import clear_output\n",
    "\n",
    "import keras\n",
    "import numpy as np\n",
    "from keras.datasets import cifar10\n",
    "from sklearn.model_selection import train_test_split\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Flatten, Dropout, Activation\n",
    "from keras.layers import Conv2D, MaxPooling2D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class TrainingPlot(keras.callbacks.Callback):\n",
    "    \n",
    "    # This function is called when the training begins\n",
    "    def on_train_begin(self, logs={}):\n",
    "        # Initialize the lists for holding the logs, losses and accuracies\n",
    "        self.losses = []\n",
    "        self.acc = []\n",
    "        self.val_losses = []\n",
    "        self.val_acc = []\n",
    "        self.logs = []\n",
    "    \n",
    "    # This function is called at the end of each epoch\n",
    "    def on_epoch_end(self, epoch, logs={}):\n",
    "        \n",
    "        # Append the logs, losses and accuracies to the lists\n",
    "        self.logs.append(logs)\n",
    "        self.losses.append(logs.get('loss'))\n",
    "        self.acc.append(logs.get('acc'))\n",
    "        self.val_losses.append(logs.get('val_loss'))\n",
    "        self.val_acc.append(logs.get('val_acc'))\n",
    "        \n",
    "        # Before plotting ensure at least 2 epochs have passed\n",
    "        if len(self.losses) > 1:\n",
    "            \n",
    "            # Clear the previous plot\n",
    "            clear_output(wait=True)\n",
    "            N = np.arange(0, len(self.losses))\n",
    "            \n",
    "            # You can chose the style of your preference\n",
    "            # print(plt.style.available) to see the available options\n",
    "            plt.style.use(\"seaborn\")\n",
    "            \n",
    "            # Plot train loss, train acc, val loss and val acc against epochs passed\n",
    "            plt.figure()\n",
    "            plt.plot(N, self.losses, label = \"train_loss\")\n",
    "            plt.plot(N, self.acc, label = \"train_acc\")\n",
    "            plt.plot(N, self.val_losses, label = \"val_loss\")\n",
    "            plt.plot(N, self.val_acc, label = \"val_acc\")\n",
    "            plt.title(\"Training Loss and Accuracy [Epoch {}]\".format(epoch))\n",
    "            plt.xlabel(\"Epoch #\")\n",
    "            plt.ylabel(\"Loss/Accuracy\")\n",
    "            plt.legend()\n",
    "            plt.show()\n",
    "\n",
    "plot_losses = TrainingPlot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "num_classes = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Split the data into train and test sets\n",
    "(x_train, y_train), (x_test, y_test) = cifar10.load_data()\n",
    "\n",
    "# Preprocess data\n",
    "x_train = x_train.astype('float32')\n",
    "x_test = x_test.astype('float32')\n",
    "x_train /= 255\n",
    "x_test /= 255\n",
    "\n",
    "# Convert class vectors to binary class matrices\n",
    "y_train_cat = np.squeeze(keras.utils.to_categorical(y_train, num_classes))\n",
    "y_test_cat = np.squeeze(keras.utils.to_categorical(y_test, num_classes))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_1 (Conv2D)            (None, 32, 32, 32)        896       \n",
      "_________________________________________________________________\n",
      "activation_1 (Activation)    (None, 32, 32, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 30, 30, 32)        9248      \n",
      "_________________________________________________________________\n",
      "activation_2 (Activation)    (None, 30, 30, 32)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 15, 15, 32)        0         \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 15, 15, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 15, 15, 64)        18496     \n",
      "_________________________________________________________________\n",
      "activation_3 (Activation)    (None, 15, 15, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_4 (Conv2D)            (None, 13, 13, 64)        36928     \n",
      "_________________________________________________________________\n",
      "activation_4 (Activation)    (None, 13, 13, 64)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 6, 6, 64)          0         \n",
      "_________________________________________________________________\n",
      "dropout_2 (Dropout)          (None, 6, 6, 64)          0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 2304)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 512)               1180160   \n",
      "_________________________________________________________________\n",
      "activation_5 (Activation)    (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dropout_3 (Dropout)          (None, 512)               0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 10)                5130      \n",
      "_________________________________________________________________\n",
      "activation_6 (Activation)    (None, 10)                0         \n",
      "=================================================================\n",
      "Total params: 1,250,858\n",
      "Trainable params: 1,250,858\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "#Define the model\n",
    "model = Sequential()\n",
    "model.add(Conv2D(32, (3, 3), padding='same',\n",
    "                 input_shape=x_train.shape[1:]))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(32, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Conv2D(64, (3, 3), padding='same'))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Conv2D(64, (3, 3)))\n",
    "model.add(Activation('relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2, 2)))\n",
    "model.add(Dropout(0.25))\n",
    "\n",
    "model.add(Flatten())\n",
    "model.add(Dense(512))\n",
    "model.add(Activation('relu'))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(num_classes))\n",
    "model.add(Activation('softmax'))\n",
    "\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Compile the model\n",
    "model.compile(loss='categorical_crossentropy',\n",
    "             optimizer='adam',\n",
    "             metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfIAAAFnCAYAAABdOssgAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xd8VFX6+PHPvTOZPqmkAEF6R0DFgiKBiBCaogji7qIu\nrruri9jWgit2F/Qra8H6Q+worIggsoACgoqCIAoEpCrS0zMpM5Opvz+SDAmkTMIMac/79cpr7r0z\n99xnTibz5Nx77jmK3+/3I4QQQogmSW3oAIQQQghRf5LIhRBCiCZMErkQQgjRhEkiF0IIIZowSeRC\nCCFEEyaJXAghhGjCJJGLBvfoo4+SlpZGWloavXv3ZujQoYH1oqKiOpWVlpZGdnZ2ja+ZPXs2H330\n0ZmEXEn37t05ceJEyMo7G06cOEH37t1rfM20adMYMmQITqfzLEUVHkeOHKF3796kpaWxc+dOHnzw\nQS655JLAZ6z8Z/bs2SE/9pw5c/jXv/4V1GtfeeUV0tLSGDFiBHfddReFhYWVnrfb7aSmpjJnzhwA\nbrnlFi6++OLAumi5tA0dgBCPP/54YDk1NZVnn32WAQMG1KuslStX1vqae++9t15ltyT5+fkcOnSI\nK664gtWrVzNmzJiGDumMJCYmVvps3Hjjjdx+++0NGFFlK1euZOXKlSxatAiTycS9997Lm2++yd13\n3x14zakJe968eZLEBSAtctEETJ48meeff56RI0eydetWsrOzueWWW0hLSyM1NZW333478Nry1vGm\nTZu4/vrrmT17NiNHjiQ1NZUffvgBgAcffJBXX30VKP3HYcGCBVx33XUMGjSIWbNmBcp6/fXXGThw\nIOPHj2f+/PmkpqbWKe6SkhIeeeQRRowYwciRI5k1axZerxeADz74gJEjR5KWlsZ1113Hvn37atxe\nkcPh4K677mLEiBGkpqbyzDPPVKqrt99+mxtuuIHLL7+ce+65h/IxnxYtWsTQoUMZO3Ysn332WY2x\nL1++nNTUVMaMGcOSJUsqPff1118zevRoRowYwd/+9jfy8/Or3X7kyBF69eoV2Lfi+uLFi5k6dSo3\n3XQTzz77LFDaKh0xYgTDhg3jb3/7GwUFBQA4nU7uv/9+UlNTGTlyJEuXLmXfvn1cdNFFuFyuQPnT\npk3jnXfeqf2XU4PU1FTmzp3LtddeyyWXXMILL7wQeG7FihWMGTOGtLQ0brzxRg4dOlRtfOVcLhf3\n3HMPqampTJw4kYyMjNOO2blzZ2bOnInFYkFVVc4777xKv/vdu3ezceNGxo4de0bvTTRPkshFk5Ce\nns7y5cs5//zzee2110hOTmblypW8++67zJ49m+PHj5+2z65du+jXrx8rVqzgD3/4A6+99lqVZW/e\nvJmFCxfyySef8MEHH3DixAn27dvHm2++ydKlS/nwww+Daumf6t133+XEiRMsX76cTz/9lC1btvD5\n559TVFTEiy++yMcff8zKlSu55ZZbWLduXbXbT/XRRx9RXFzMypUr+fTTT1m8eDFbtmwJPL927Vre\nfvttVq1axcaNG9m6dSs2m42nn36aN998k2XLlpGZmVlj7J9++ilXXXUV5513HocPHyYrKwsoPb17\n33338fzzz7Nq1SrOOeccXnzxxWq312bDhg08/vjj3H///aSnpzN//nw++eQTvvjiC1wuFx988AEA\nb731Fm63O/DennzySSIjI0lMTOSbb74BSv9x+vbbbxk5cmSwv6Jq/fzzz3z88ccsX76cDz/8kN27\nd3Ps2DFmzJjBK6+8wsqVKxkyZAiPPPJItfGVJ+zvv/+ee++9l7Vr1xIbG8uiRYtOO17Xrl3p06dP\nYP3rr7+mX79+APj9fh577DFmzJiBVisnUcXpJJGLJiElJQVVLf24Pvzww8yYMQOAdu3aER8fz5Ej\nR07bx2w2M2zYMAB69+7NsWPHqix77NixaDQaEhMTiYuL4/jx42zevJmLLrqIhIQE9Ho948ePr3PM\n69atY+LEiWi1WgwGA2PHjmXDhg3o9XoURWHRokVkZ2czcuRIbr311mq3n2rKlCm8+uqrKIpCVFQU\nXbt2rfT+09LSMBgMmEwmOnTowPHjx9m2bRvt27enc+fOAIwbN67auPfv349Go6FDhw4AjB49mmXL\nlgGwdetWkpKS6NatGwD33Xcf06dPr3Z7bTp06BA4Tp8+fVi3bl2lVunhw4eBk619gKSkJNavX09i\nYiJjxoxh+fLlAHz77bf06tWLxMTEWo/73nvvnXaNvOI/Q+PGjUOj0RAXF8cFF1zA1q1b2bBhAxdf\nfDHt27cHYMKECWzatAmPx1NtfAAXXHABbdu2BaBHjx5Vtsgreu2118jJyWHy5MkALFiwgC5dunD+\n+efX+r5EyyT/3okmISoqKrC8Y8eOQCtcVVWysrLw+Xyn7WO1WgPLqqpW+RoAi8USWNZoNHi9XgoK\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f0f4812bb70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r",
      "50000/50000 [==============================] - 11s 219us/step - loss: 0.4826 - acc: 0.8302 - val_loss: 0.6544 - val_acc: 0.7864\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x7f0f71f12d30>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Train the model using callback to the TrainingPlot class object\n",
    "model.fit(x_train, y_train_cat,\n",
    "         epochs=25,\n",
    "         validation_data=(x_test, y_test_cat),\n",
    "         callbacks=[plot_losses])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
